module AtomOM1
  ( compileOM1 )
where

import Data.Word
import Language.Atom


-- Parameters ----------------------------------------------------------

sourcePeriod = 20
observerPeriod = 20


-- Messages ------------------------------------------------------------

type MsgType = Word64

-- | Special message type value indicating "no message present"
missingMsgValue :: MsgType
missingMsgValue = 0

-- | Delcare a local variable of message type
msgVar :: Name -> Atom (V MsgType)
msgVar = flip word64 missingMsgValue


-- OM1 Spec ------------------------------------------------------------

om1 :: Atom ()
om1 = do

  -- setup channels for communication bewteen source, relays, and receivers
  c1v <- msgVar "c1v"
  c1 <- vchannel c1v  -- :: VChannel MsgType

  atom "source" $ source c1

  atom "observer" $ observer c1


source :: VChannel MsgType -> Atom ()
source c1 = do
  done <- bool "done" False
  msg  <- msgVar "msg"
  msg  <== 1
  period sourcePeriod $ do
    cond $ not_ (value done)
    updateVChannel c1 (value msg)
    done <== Const True


observer :: VChannel MsgType -> Atom ()
observer c1 = period observerPeriod $ do
  v <- readVChannel c1  -- disruptive read
  printIntegralE "v = " v


-- Variable Channels ---------------------------------------------------

type VChannel a = Channel (V a)

vchannel :: V a -> Atom (VChannel a)
vchannel = channel

writeVChannel :: VChannel a -> Atom ()
writeVChannel = writeChannel

readVChannel :: VChannel a -> Atom (E a)
readVChannel c = value <$> readChannel c

updateVChannel :: Assign a => VChannel a -> E a -> Atom ()
updateVChannel (Channel var _) expr = do
  var <== expr


-- Code Generator ------------------------------------------------------

-- | Invoke the atom compiler, generating 'om1.{c,h}'
-- Also print out info on the generated schedule.
compileOM1 :: IO ()
compileOM1 = do
  (sched, _, _, _, _) <- compile "om1" cfg om1
  putStrLn $ reportSchedule sched
  where
    cfg = defaults { cCode = prePostCode }

-- | Custom pre-post code for generated C
prePostCode :: [Name] -> [Name] -> [(Name, Type)] -> (String, String)
prePostCode _ _ _ =
  ( unlines [ "// ---- This source is automatically generated by Atom ----"
            ]
  , unlines [ "// ---- This source is automatically generated by Atom ----"
            ]
  )
