module Main where

import Language.Atom
import Language.Sally

import AtomSMP (smp)

main :: IO ()
main = do
  putStrLn "Compiling SMP to C... (smp.{c,h})"
  compileSMPToC
  putStrLn "Compiling SMP to Sally... (smp.mcmt)"
  let sallyCfg = defaultCfg { cfgMFA = hybridMFA }
  compileToSally "smp" sallyCfg "smp.mcmt" smp Nothing
  putStrLn "Done."


-- C Code Generator ------------------------------------------------------

-- | Invoke the atom compiler, generating 'om1.{c,h}'
-- Also print out info on the generated schedule.
compileSMPToC :: IO ()
compileSMPToC = do
  res <- compile "smp" cfg smp
  putStrLn $ reportSchedule (compSchedule res)
  where
    cfg = defaults { cCode = prePostCode }

-- | Custom pre-post code for generated C
prePostCode :: [Name] -> [Name] -> [(Name, Type)] -> (String, String)
prePostCode _ _ _ =
  ( unlines [ "#include <stdio.h>"
            , "#include <unistd.h>"
            , ""
            , "// ---- BEGIN of source automatically generated by Atom ----"
            ]
  , unlines [ "// ---- END of source automatically generated by Atom ----"
            , ""
            , "int main(int argc, char **argv) {"
            , "  while(1) { smp(); usleep(1000); }"
            , "}"
            ]
  )
