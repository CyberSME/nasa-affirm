;; Constants
;; NONE

;; State type
(define-state-type
 smp_state_type
 ((smp!__channel_s2r_1!var Int)
  (smp!__channel_s2r_1!ready Bool)
  (smp!__channel_s2r_2!var Int)
  (smp!__channel_s2r_2!ready Bool)
  (smp!source!done Bool)
  (smp!recv1!done Bool)
  (smp!recv1!recv1_vote Int)
  (smp!recv2!done Bool)
  (smp!recv2!recv2_vote Int)))

;; Initial State
(define-states
 smp_initial_state
 smp_state_type
 (and
  (= smp!__channel_s2r_1!var 0)
  (=
   smp!__channel_s2r_1!ready
   false)
  (= smp!__channel_s2r_2!var 0)
  (=
   smp!__channel_s2r_2!ready
   false)
  (= smp!source!done false)
  (= smp!recv1!done false)
  (= smp!recv1!recv1_vote 0)
  (= smp!recv2!done false)
  (= smp!recv2!recv2_vote 0)))

;; Transitions
(define-transition
 smp_transition_0
 smp_state_type
 (let
  ((temp!0 state.smp!source!done)
   (temp!1 (not temp!0))
   (temp!2 true)
   (temp!3 1)
   (temp!4 2))
  (and
   (= next.smp!source!done temp!2)
   (=
    next.smp!__channel_s2r_1!var
    state.smp!__channel_s2r_1!var)
   (=
    next.smp!__channel_s2r_1!ready
    state.smp!__channel_s2r_1!ready)
   (=
    next.smp!__channel_s2r_2!var
    state.smp!__channel_s2r_2!var)
   (=
    next.smp!__channel_s2r_2!ready
    state.smp!__channel_s2r_2!ready)
   (=
    next.smp!recv1!done
    state.smp!recv1!done)
   (=
    next.smp!recv1!recv1_vote
    state.smp!recv1!recv1_vote)
   (=
    next.smp!recv2!done
    state.smp!recv2!done)
   (=
    next.smp!recv2!recv2_vote
    state.smp!recv2!recv2_vote))))
(define-transition
 smp_transition_1
 smp_state_type
 (let
  ((temp!0 true)
   (temp!1
    state.smp!__channel_s2r_1!var)
   (temp!2
    state.smp!recv1!recv1_vote)
   (temp!3 state.smp!recv1!done)
   (temp!4 state.smp!source!done))
  (and
   (=
    next.smp!recv1!recv1_vote
    temp!1)
   (= next.smp!recv1!done temp!0)
   (=
    next.smp!__channel_s2r_1!var
    state.smp!__channel_s2r_1!var)
   (=
    next.smp!__channel_s2r_1!ready
    state.smp!__channel_s2r_1!ready)
   (=
    next.smp!__channel_s2r_2!var
    state.smp!__channel_s2r_2!var)
   (=
    next.smp!__channel_s2r_2!ready
    state.smp!__channel_s2r_2!ready)
   (=
    next.smp!source!done
    state.smp!source!done)
   (=
    next.smp!recv2!done
    state.smp!recv2!done)
   (=
    next.smp!recv2!recv2_vote
    state.smp!recv2!recv2_vote))))
(define-transition
 smp_transition_2
 smp_state_type
 (let
  ((temp!0 true)
   (temp!1
    state.smp!__channel_s2r_2!var)
   (temp!2
    state.smp!recv2!recv2_vote)
   (temp!3 state.smp!recv2!done)
   (temp!4
    state.smp!recv1!recv1_vote)
   (temp!5 state.smp!recv1!done)
   (temp!6 state.smp!source!done))
  (and
   (=
    next.smp!recv2!recv2_vote
    temp!1)
   (= next.smp!recv2!done temp!0)
   (=
    next.smp!__channel_s2r_1!var
    state.smp!__channel_s2r_1!var)
   (=
    next.smp!__channel_s2r_1!ready
    state.smp!__channel_s2r_1!ready)
   (=
    next.smp!__channel_s2r_2!var
    state.smp!__channel_s2r_2!var)
   (=
    next.smp!__channel_s2r_2!ready
    state.smp!__channel_s2r_2!ready)
   (=
    next.smp!source!done
    state.smp!source!done)
   (=
    next.smp!recv1!done
    state.smp!recv1!done)
   (=
    next.smp!recv1!recv1_vote
    state.smp!recv1!recv1_vote))))
(define-transition
 smp_transition
 smp_state_type
 (or
  smp_transition_0
  smp_transition_1
  smp_transition_2))

;; System Definition
(define-transition-system
 smp_transition_system
 smp_state_type
 smp_initial_state
 smp_transition)
;; Query
;; NONE
